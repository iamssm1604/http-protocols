/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos DONE.
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123 DONE.
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    DONE

  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
var listOfItems = [];
let idOfTodo = 0;
function addTodo(nameOfTodo, isCompleted, toDo) {
  listOfItems.push(
    {
      id: ++idOfTodo,
      title: nameOfTodo,
      completed: isCompleted,
      description: toDo
    }
  );
}
const express = require('express');
const bodyParser = require('body-parser');

const app = express();

app.use(bodyParser.json());
app.post('/todos', function (req, res) {

  const taskTodo = req.body.taskTodo;
  const StatusOfTodo = req.body.StatusOfTodo;
  const DescriptionOfTodo = req.body.DescriptionOfTodo;
  addTodo(taskTodo, StatusOfTodo, DescriptionOfTodo);
  res.status(201).json({ "id": idOfTodo });
})

app.get('/todos', (req, res) => {
  if (listOfItems.length != 0) {
    res.status(200).json(listOfItems);
  }
  else {
    res.status(404).send("Not a task found, please add a task.");
  }
});

app.get('/todos/:id', (req, res) => {
  const idGot = req.params.id;
  for (let i = 0; i < listOfItems.length; i++) {
    if (i + 1 == idGot) {
      res.status(200).json(listOfItems[i]);
      return;
    }
  }
  res.status(404).send("Task having " + idGot + " ID not found.");
});

app.put('/todos/:id', (req, res) => {
  const idGot = req.params.id;

  for (let i = 0; i < listOfItems.length; i++) {
    if (i + 1 == idGot) {

      listOfItems[i].completed = true;

      res.status(200).json({
        "title": listOfItems[i].title,
        "completed": listOfItems[i].completed
      });
      return;
    }
  }
  res.status(404).send("Task with the specified id is not found, please check the id again.");
})

app.delete('/todos/:id', (req, res) => {
  const idGot = parseInt(req.params.id);
  const index = listOfItems.findIndex(item => item.id === idGot);
  if (index !== -1) {
    listOfItems.splice(index, 1);
    res.status(200).send("Item deleted successfully.");
  }
  else {
    res.status(404).send("Item not found.");
  }
}
);

app.use('*', function (req, res) {
  res.status(404).send("Route not found");
})

app.listen(3000);
module.exports = app;